import pandas as pd
import numpy as np
import re
import string

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Sample dataset
data = {
    "title": [
        "Breaking: Local Man Wins Lottery",
        "Scientists Discover New Species in Amazon",
        "Aliens Have Landed in Ohio",
        "Government Hides UFO Evidence",
        "Elections Were Rigged, Says Unknown Source",
        "COVID-19 Vaccine Proven Effective in New Study",
        "Fake News: Drinking Bleach Cures Virus",
        "The Earth is Flat, Claims YouTube Star"
    ],
    "text": [
        "A local man has won the lottery and plans to donate to charity.",
        "Researchers exploring the Amazon have discovered a new insect species.",
        "Several social media posts claim alien ships landed last night in Ohio.",
        "Leaked documents suggest the government is hiding evidence of UFOs.",
        "An anonymous blog post alleges election tampering without proof.",
        "A recent study shows high efficacy rates in vaccine trials.",
        "Viral misinformation spreads suggesting bleach cures the virus.",
        "Controversial YouTube star insists the Earth is flat and NASA lies."
    ],
    "label": [1, 1, 0, 0, 0, 1, 0, 0]
}
df = pd.DataFrame(data)

# Basic stopword list (manually defined)
stop_words = set([
    'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your',
    'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she',
    'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their',
    'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that',
    'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being',
    'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an',
    'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of',
    'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through',
    'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down',
    'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then',
    'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any',
    'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no',
    'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's',
    't', 'can', 'will', 'just', 'don', 'should', 'now'
])

# Preprocessing functions
def clean_text(text):
    text = text.lower()
    text = re.sub(r'.*?', '', text)
    text = re.sub(r'https?://\S+|www\.\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub(r'\n', '', text)
    text = re.sub(r'\w*\d\w*', '', text)
    return text

def remove_stopwords(text):
    return " ".join([word for word in text.split() if word not in stop_words])

# Apply preprocessing
df['text'] = df['title'] + " " + df['text']
df['text'] = df['text'].apply(clean_text).apply(remove_stopwords)

# Split data
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Vectorization
vectorizer = TfidfVectorizer(max_features=500)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Evaluate
y_pred = model.predict(X_test_vec)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Prediction function
def predict_news(news_text):
    cleaned = remove_stopwords(clean_text(news_text))
    vec = vectorizer.transform([cleaned])
    prediction = model.predict(vec)[0]
    prob = model.predict_proba(vec)[0]
    print("\nNews:", news_text)
    print("Prediction:", "REAL" if prediction == 1 else "FAKE")
    print("Confidence:", round(max(prob) * 100, 2), "%")

# Example prediction
predict_news("NASA confirms water found on the moon in recent discovery.")